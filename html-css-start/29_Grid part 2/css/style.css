@charset "UTF-8";
/* Обнуление */
* {
  padding: 0;
  margin: 0;
  border: 0;
}

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

:focus,
:active {
  outline: none;
}

a:focus,
a:active {
  outline: none;
}

nav,
footer,
header,
aside {
  display: block;
}

html,
body {
  height: 100%;
  width: 100%;
  font-size: 100%;
  line-height: 1;
  font-size: 14px;
  -ms-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

input,
button,
textarea {
  font-family: inherit;
}

input::-ms-clear {
  display: none;
}

button {
  cursor: pointer;
}

button::-moz-focus-inner {
  padding: 0;
  border: 0;
}

a,
a:visited {
  text-decoration: none;
}

a,
hover {
  text-decoration: none;
}

ul li {
  list-style: none;
}

img {
  vertical-align: top;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: 400;
}

/*---------------*/
/*

Элементы сетки
1) Даже если элемент сетки реализуем с помощью строчного объекта (например span) - как только он становиться элементом сетки т.е. для родителя задан display: grid; или display: inline-grid; - эти строчные объекты становятся блочными и на них действует все те же свойства и правила как для блочного объекта
2) Если мы указываем margin для элемента в сетке - то он не будет схлопываться - потому что каждый элемент сетки находится как бы в отдельной ячейке
3) Процентные значения padding и margin  для элементов сетки лучше не указывать - т.к. разные браузеры по разному их вычисляют
4) margin auto - позволяет выравнивать элементы сетки

Размещение элементов с помощью линий сетки
    grid-row-start: auto;
    grid-row-end: auto;
    grid-column-start: auto;
    grid-column-end: auto;

По умолчанию значение auto - значит элементы размещаются автоматически - по сетке

Всё это можем изменять

Можно быстро поместить объект на 2 строку 3 колонку
    grid-row-start: 2;
    grid-column-start: 3;

Для заполнения нескольких ячеек объектом можно использовать ключевое слово span и количество ячеек которые должен объект занимать
grid-row-start: span 2;
grid-column-start: span 2;


Дополнительно можно задавать имена линиям сетки и впоследствии размещать элемент по имени данной линии
задаём их в 
grid-template-rows: [start] 1fr [row2] 1fr [row-end];
grid-template-columns: [start] 1fr [col2] 1fr [col3] 1fr [row-end];

Короткая запись
grid-row: 1 / 2; - стартует на линии 1 и заканчивается на линии 2
grid-column: 1 / 2;
Здесь можно указывать и имена линий если мы их задавали ранее

Можно изменить порядок вывода элементов сетки с помощью свойства order
Это свойство нужно задавать каждому элементу сетки чтобы не было путаницы


Выравнивание элементов сетки

По умолчанию
justify-items: stretch;      горизонтальное выравнивание
align-items: stretch;        вертикальное выравнивание

justify-items: start; - элементы сетки заняли пространство равное контенту и перестали растягиваться на весь размер ячейки - при этом они прижались к левому краю
justify-items: end; - тоже самое только элементы прижмутся к правому краю
align-items: start;
align-items: end;

Отдельно выравнивание можно переназначить каждому элементу сетки
justify-self: stretch;      
align-self: stretch; 

Также можем расположить элемент по центру grid ячейки используя параметр 
margin: auto;


Промежутки между элементами сетки
row-gap: 0px;       для строк
column-gap: 0px;    для колонок
gap: 0px;           для строк и колонок




*/
body {
  background-color: black;
  color: white;
}

h1 {
  text-align: center;
  margin: 0 0 30px 0;
  font-size: 30px;
  font-weight: 900;
}

p {
  margin: 20px 0;
}

.wrapper {
  min-height: 100%;
  overflow: hidden;
}

.content {
  padding: 30px 3%;
}

.grid {
  font-size: 30px;
  position: relative;
  margin: 0 0 40px 0;
}

.grid__body {
  display: -ms-grid;
  display: grid;
  -ms-grid-rows: 150px 20% 150px;
  -ms-grid-columns: 1fr 20% 1fr 20% 1fr;
      grid-template: repeat(2, 150px)/repeat(3, 1fr);
  gap: 20%;
}

.grid__item {
  text-align: center;
  border: 2px dashed rgba(255, 255, 255, 0.8);
  padding: 30px;
}

.grid__item_1 {
  -ms-grid-column-align: stretch;
      justify-self: stretch;
  -ms-flex-item-align: stretch;
      -ms-grid-row-align: stretch;
      align-self: stretch;
}

.grid__item_2 {
  margin: auto;
}