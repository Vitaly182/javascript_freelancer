// Файл обнуляющих стилей
@import "nullstyle.scss";

/*

Элементы сетки
1) Даже если элемент сетки реализуем с помощью строчного объекта (например span) - как только он становиться элементом сетки т.е. для родителя задан display: grid; или display: inline-grid; - эти строчные объекты становятся блочными и на них действует все те же свойства и правила как для блочного объекта
2) Если мы указываем margin для элемента в сетке - то он не будет схлопываться - потому что каждый элемент сетки находится как бы в отдельной ячейке
3) Процентные значения padding и margin  для элементов сетки лучше не указывать - т.к. разные браузеры по разному их вычисляют
4) margin auto - позволяет выравнивать элементы сетки

Размещение элементов с помощью линий сетки
    grid-row-start: auto;
    grid-row-end: auto;
    grid-column-start: auto;
    grid-column-end: auto;

По умолчанию значение auto - значит элементы размещаются автоматически - по сетке

Всё это можем изменять

Можно быстро поместить объект на 2 строку 3 колонку
    grid-row-start: 2;
    grid-column-start: 3;

Для заполнения нескольких ячеек объектом можно использовать ключевое слово span и количество ячеек которые должен объект занимать
grid-row-start: span 2;
grid-column-start: span 2;


Дополнительно можно задавать имена линиям сетки и впоследствии размещать элемент по имени данной линии
задаём их в 
grid-template-rows: [start] 1fr [row2] 1fr [row-end];
grid-template-columns: [start] 1fr [col2] 1fr [col3] 1fr [row-end];

Короткая запись
grid-row: 1 / 2; - стартует на линии 1 и заканчивается на линии 2
grid-column: 1 / 2;
Здесь можно указывать и имена линий если мы их задавали ранее

Можно изменить порядок вывода элементов сетки с помощью свойства order
Это свойство нужно задавать каждому элементу сетки чтобы не было путаницы


Выравнивание элементов сетки

По умолчанию
justify-items: stretch;      горизонтальное выравнивание
align-items: stretch;        вертикальное выравнивание

justify-items: start; - элементы сетки заняли пространство равное контенту и перестали растягиваться на весь размер ячейки - при этом они прижались к левому краю
justify-items: end; - тоже самое только элементы прижмутся к правому краю
align-items: start;
align-items: end;

Отдельно выравнивание можно переназначить каждому элементу сетки
justify-self: stretch;      
align-self: stretch; 

Также можем расположить элемент по центру grid ячейки используя параметр 
margin: auto;


Промежутки между элементами сетки
row-gap: 0px;       для строк
column-gap: 0px;    для колонок
gap: 0px;           для строк и колонок




*/

body{
    background-color: black;
    color: white;
}

h1{
    text-align: center;
    margin: 0 0 30px 0;
    font-size: 30px;
    font-weight: 900;
}

p {
    margin: 20px 0;
}

.wrapper{
    min-height: 100%;
    overflow: hidden;
}

.content{
    padding: 30px 3%;
}

.grid{
    font-size: 30px;
    position: relative;
    margin: 0 0 40px 0;
}

.grid__body{
    display: grid;
    grid-template: repeat(2, 150px) / repeat(3, 1fr);

    // justify-items: end;
    // align-items: start;

    // row-gap: 20px;       //20% процент вычисляется от размера grid контейнера
    // column-gap: 20px;
    gap: 20%;

}

.grid__item{
    // margin: 30px;
    text-align: center;
    border: 2px dashed rgba(255, 255, 255, 0.8);
    padding: 30px;
}

.grid__item_1{
    // grid-row-start: span 2;
    // grid-row-end: auto;
    // grid-column-start: span 2;
    // grid-column-end: auto;

    // grid-row: 1 / 2;
    // grid-column: 1 / 2;

    // background-color: #794f45;

    justify-self: stretch;      
    align-self: stretch; 



}

.grid__item_2{
    margin: auto;
}

.grid__item_3{

}

.grid__item_4{

}

.grid__item_5{

}

.grid__item_6{

}