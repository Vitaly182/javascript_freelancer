/* 
Для решения проблемы кроссбраузерности и соответствия макету обнуляем все стили
*/

/* 1) очищаем все отступы и границы */
* {
    /* звёздочка означает что мы обращаемся ко всем тегам на странице */
    padding: 0;
    margin: 0;
    border: 0;
}

/* 2) меняет подсчёт ширины блока так, чтобы нам было удобнее верстать*/
*,
*:before,
*:after {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

/* 3) убираем линии обводки у некоторых браузеров */
:focus,
:active {
    outline: none;
}
a:focus,
a:active {
    outline: none;
}

/* 4) перечисляем некоторые html5 теги и добавляем им значение block - это делает их блочными*/
nav,
footer,
header,
aside {
    display: block;
}

/* 5) применим к тегам html и body параметры которые уравнивают поведение шрифтов и элементов для разных браузеров, в т.ч. запрещают самовольное увеличение шрифта(на айфонах например)*/
html,
body {
    height: 100%;
    width: 100%;
    font-size: 100%;
    line-height: 1;
    font-size: 14px;
    -ms-text-size-adjust: 100%;
    -moz-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
}

/* 6) применяем к тегам форм наследуемый шрифт (по умолчанию они не наследуют семейство шрифта) */
input,
button,
textarea {
    font-family: inherit;
}

/* 7) добавляем несколько параметров некоторым тегам, которые убирают некоторые особенности в разных браузерах */
input::-ms-clear {
    display: none;
}
button {
    cursor: pointer;
}
button::-moz-focus-inner {
    padding: 0;
    border: 0;
}
a,
a:visited {
    text-decoration: none;
}
a,
hover {
    text-decoration: none;
}
ul li {
    list-style: none;
}
img {
    vertical-align: top;
}

/* 8) обнуляем все наши заголовки h*/
h1,
h2,
h3,
h4,
h5,
h6 {
    font-size: inherit;
    font-weight: 400;
}



/* Свойства блочных тегов */

/* 1 свойство - padding - внутренний отступ блочный тегов */
/* у данного свойства не может быть отрицательных значений */
/* это свойство работает хорошо только с блочными тегами */
/* может быть не только в px, но и в % - процентное значение вычисляется от ширины родителя, т.е. в данном случае всей ширины окна браузера*/
.example-block{
    /*padding: 10px 20px 30px 5px;*/     /* сначало указываем отступ от верхнего края, потом отступ от правого края, потом отступ снизу, потом отступ слева*/
    /*padding: 10px 20px 30px;    */     /* если будет 3 значения -  то это будет - отступ сверху, отступ слева и справа, отступ снизу */
    /*padding: 10px 20px;        */      /* если будет 2 значения -  то это будет - отступ сверху и снизу, отступ слева и справа */
    /*padding: 10px;            */       /* если будет 1 значение -  то это будет - применение сразу к 4 сторонам */
    /*padding: 0%;*/

    border: 1px solid #000;  /*свойство оформления - сейчас добавлено для демонстрации отступов */
}

/* 2 свойство - margin - внешний отступ блочных тегов */
/* значения свойства margin записываются также как свойства padding */
/* существенная разница margin от padding в том, что мы можем давать отрицательные значения - при этом блок заезжает за границы родителя (в данном случае окна браузера)*/
/* это свойство работает хорошо только с блочными тегами */
.example-block{
    /*margin: 10px 20px 30px 5px;  */   /* сначало указываем отступ от верхнего края, потом отступ от правого края, потом отступ снизу, потом отступ слева*/
    /*margin: 10px 20px 30px;    */     /* если будет 3 значения -  то это будет - отступ сверху, отступ слева и справа, отступ снизу */
    /*margin: 10px 20px;      */        /* если будет 2 значения -  то это будет - отступ сверху и снизу, отступ слева и справа */
    /*margin: 10px;         */          /* если будет 1 значение -  то это будет - применение сразу к 4 сторонам */
    /*margin: 3%;*/
    /*margin: 10px -20px; */
}

/* 3 свойство - width - устанавливает ширину блочных тегов, а также некоторых строчных например img */
/* при увеличении / уменьшении родителя - блок останется на месте с такой же шириной */
.example-block{
    /*width: 500px;*/
}

.example-img{
    width: 100px;
    height: 50px;
}

/* 4 свойство - max-width - устанавливает максимальную ширину блочных тегов, а также некоторых строчных */
/* при увеличении родителя выше заданного - блок останется на месте / при уменьшении родителя - блок также будет уменьшаться вместе с родителем */
.example-block{
    /*max-width: 400px;*/
}

/* 5 свойство - min-width - устанавливает минимальную ширину блочных тегов, а также некоторых строчных */
/* при увеличении родителя выше заданного - блок будет увеличиваться вместе с родителем / при уменьшении родителя - блок останется на месте*/
.example-block{
    /*min-width: 600px;*/
}

/* 6 свойство - height - устанавливает высоту блочных тегов, а также некоторых строчных */
/* при увеличении / уменьшении родителя - блок останется на месте с такой же высотой */
.example-block{
    /* height: 200px;*/
    /* height: 10%;*/
}

/* 7 свойство - max-height - устанавливает максимальную высоту блочных тегов, а также некоторых строчных */
/* при увеличении текста - блок останется на месте и текст вываливается из блока */
.example-block{
    /*max-height: 20px;*/
}

/* 8 свойство - min-height - устанавливает минимальную высоту блочных тегов, а также некоторых строчных */
/* при уменьшении текста - блок останется на месте / если же добавим много текста - то блок без проблем увеличиться */
.example-block{
    /*min-height: 200px;*/
}

/*  если не включено свойство - box-sizing: border-box; - то границы блока увеличиваются на размеры padding/margin/border */ 


/* 9 свойство - overflow - управляет отображением содержания блочного элемента */
.example-block{
    /*overflow: visible;*/     /* визульно с блоком ничего не произойдёт, но если мы ограничим блок по высоте (max-height) - мы увидим что текст видно за его пределами */
    /*overflow: hidden;*/          /* скрывает всё что находится за пределами блока */
    /*overflow: scroll;*/           /* появляется scroll если текст не помещается в блок */
    /*overflow: auto; */               /* подключает полосы прокрутки только тогда когда они нужны */
    /*max-height: 40px;*/
}



/* 10 свойство - display - многоцелевое свойство, которое определяет, как элемент должен быть показан в документе */
.example-block{
    /*display: block;*/    /* заставляем элемент показываться как блочный - если он был строчный - то превращается в блочный */
    /*display: inline;*/      /* элемент превращается в строчный */
    /*display: inline-block;*/      /* элемент остаётся строчным, т.е. занимает ширину равную контенту, всё также выстраивается в строку, но на него начинают действовать вышеописанные свойства высоты, ширины и отступов   */ 
    /*display: none;*/     /* временно удаляет элемент из документа, занимаемое им место не резервируется и веб-страница формируется так словно элемента и не было  */
    margin: 0 0 30px;
}

.example-string{
    display: inline-block;
    padding: 20px;
    border: 1px solid #000;
    margin: 0 0 30px;
}

.example-string1{
    display: inline-block;
    padding: 20px;
    border: 1px solid #000;
}



















